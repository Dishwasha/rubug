
# A GDB event (corresponds loosely to one or more command
# responses or notifications). The Event class is subclassed
# for the actual event types (eg breakpoint, signal).
module Rubug

  class Gdb

    class Event

      attr_accessor :response

      # Create a new Event object from a GDB response.
      def initialize(response)
        @response = response
      end

      # Returns true if this event is due to a command response.
      def command_response?
        type == :command_response
      end

      # Returns true if this event was due to a breakpoint being hit.
      def breakpoint?
        type == :breakpoint
      end

      # Returns true if this event was due to exit of the subordinate
      # process.
      def exit?
        type == :exit
      end

      # Returns true if this event was due to the subordinate process
      # receiving a signal.
      def signal?
        type == :signal
      end

      # Return the type of the subclassed Event object as a symbol.
      # This method allows us to avoid using the fully qualified
      # subclass names in calling scripts:
      #     case event.type
      #     when :breakpoint
      # vs.
      #     case event
      #     when Rubug::Gdb::BreakpointEvent
      # (#type used to mean #class, but is now deprecated).
      def type
        case self
        when BreakpointEvent
          :breakpoint
        when CommandResponseEvent
          :command_response
        when ExitEvent
          :exit
        when SignalEvent
          :signal
        end
      end
      alias event type

      # Create an event object from a GDB response.
      def Event.create_from_response(response)
        if response.command_response?
          klass = CommandResponseEvent
        elsif response.breakpoint_hit?
          klass = BreakpointEvent
        elsif response.exit?
          klass = ExitEvent
        elsif response.signal?
          klass = SignalEvent
        else
          klass = UnknownEvent
        end
        klass.new(response) if klass
      end

    end

    # An event generated by a response to a command.
    class CommandResponseEvent < Event
    end

    # An event that was generated by a break point being hit.
    class BreakpointEvent < Event

      attr_reader :bkptno, :frame, :thread_id

      # Create a breakpoint event from a response.
      def initialize(response)
        super
        async = response.oob_records(:exec).select do |oob|
            oob.record_class == :stopped &&
            oob.results[:reason] == 'breakpoint-hit'
        end.first
        @bkptno = async.results[:bkptno]
        @thread_id = async.results[:thread_id]
        @frame = async.results[:frame]
      end

    end

    # An event generated by the exit of the subordinate process.
    class ExitEvent < Event

      attr_reader :rc

      # Create an exit event from a response.
      def initialize(response)
        super
        async = response.oob_records(:exec).select do |oob|
          oob.record_class == :stopped &&
            [ 'exited', 'exited-normally' ].include?(oob.results[:reason])
        end.first
        @rc = async.results[:exit_code] || 0
      end

    end

    # An event generated by the receipt of a signal.
    class SignalEvent < Event

      attr_reader :signal

      # Create a signal event from a response.
      def initialize(response)
        super
        # XXX assign to :signal
      end

    end

    # XXX
    class UnknownEvent < Event ; end

  end # Gdb

end # Rubug

